{"version":3,"sources":["js/task1.js","js/task2.js","js/task3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","amount","reject","logSuccess","logError","warn","catch"],"mappings":";AAIA,MAAMA,EAAQC,GACL,IAAIC,QAAQC,IACjBC,WAAW,IAAKD,EAAQF,GAAKA,KAI3BI,EAASC,GAAQC,QAAQC,0BAA0BF,QAGzDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;ACXjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAWnBC,EAAkB,CAACC,EAAUC,IAC1B,IAAIb,QAAQC,IAIjBA,EAHqBW,EAASE,IAAIC,GAChCA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAO7DZ,EAASa,GAAgBX,QAAQY,MAAMD,GAW7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;ACrCnC,MAAMe,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,IAClB,IAAA,GAACC,EAAD,OAAIC,GAAQF,EACT,OAAA,IAAIzB,QAAQ,CAACC,EAAS2B,KACrB9B,MAAAA,EAAQoB,EAA0B,IAAK,KAE7ChB,WAAW,KACUmB,KAAKE,SAAW,IAGjCtB,EAAQ,CAACyB,EAAI5B,IAEb8B,EAAOF,IACR5B,MAKD+B,EAAa,EAAEH,EAAItB,MACvBC,QAAQC,mBAAmBoB,kBAAmBtB,SAG1C0B,EAAWJ,IACfrB,QAAQ0B,qCAAqCL,+BAK/CF,EAAgB,CAAEE,GAAI,GAAIC,OAAQ,MAC/BpB,KAAKsB,GACLG,MAAMF,GAETN,EAAgB,CAAEE,GAAI,GAAIC,OAAQ,MAC/BpB,KAAKsB,GACLG,MAAMF,GAETN,EAAgB,CAAEE,GAAI,GAAIC,OAAQ,KAC/BpB,KAAKsB,GACLG,MAAMF,GAETN,EAAgB,CAAEE,GAAI,GAAIC,OAAQ,MAC/BpB,KAAKsB,GACLG,MAAMF;;AC/CT,aAFA,QAAA,cACA,QAAA,cACA,QAAA","file":"src.f94c5cb9.js","sourceRoot":"../src","sourcesContent":["\n// Задание 1\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\n\nconst delay = ms => {\n  return new Promise(resolve => {\n    setTimeout(()=> resolve(ms), ms);\n  });\n};\n\nconst logger = time => console.log(`\\n\\tResolved after ${time} ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","\n// Задание 2\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\n// const toggleUserState = (allUsers, userName, callback) => {\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === userName ? { ...user, active: !user.active } : user,\n//   );\n\n//   callback(updatedUsers);\n// };\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise(resolve => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    resolve(updatedUsers);\n  });\n};\n\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n\n  // Сейчас работает так\n \n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n\n//  Должно работать так\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n\n\n","\n// Задание 3\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  let {id,amount}=transaction;\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve([id, delay]);\n      } \n        reject(id); \n    }, delay);\n  });\n};\n\n\nconst logSuccess = ([id, time]) => {\n  console.log(`Transaction ${id} processed in ${time} ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n//   Должно работать так\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n\n  \n// const makeTransaction = (transaction, onSuccess, onError) => {\n//   const delay = randomIntegerFromInterval(200, 500);\n// // console.log(delay);\n//   setTimeout(() => {\n//     const canProcess = Math.random() > 0.3;\n\n//     if (canProcess) {\n//       onSuccess(transaction.id, delay);\n//     } else {\n//       onError(transaction.id);\n//     }\n//   }, delay);\n// };\n\n\n// //  * Работает так\n\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n","import \"./js/task1\";\nimport \"./js/task2\";\nimport \"./js/task3\";\n\n\n\n\n"]}